'''
2. Написать функцию, которая принимает произвольное количество любых аргументов. 
    Аргументами могут быть вложенные списки и кортежи, содержащие числа и другие списки и кортежи. 
    Пример вызова функции: foo(1, 2, [3, 4, (5, 6, 0)], a=(10, 11), b=(3, 4, [5, 6, [7, 8], []]))
    Функция должна вернуть произведение и сумму всех ненулевых элементов вложенных чисел. 
    Возможны циклические ссылки в аргументах. Пример такого аргумента: a = [1, 2, 3]; a.append(a) 
    При обнаружении циклической ссылки нужно сообщить пользователю и вернуть None.
'''
#z = (1, 2, [3, 4, (5, 6, 0)], a=(10, 11), b=(3, 4, [5, 6, [7, 8], []]))

def nsum(*args, **kwargs):
    product = 1
    suma = 0
 
    def wtf(i):                                         # в этой функции буду перебирать элемнты и эту функцию вызывать рекурсивно
        if isinstance(i,int):                           # если элемент целое число, то делаем сумму и произведение
            nonlocal product
            nonlocal suma
            if i != 0:                                  # произведение не нулевых элементов
                product = product * i
            print(f"product = {product}")
            suma = suma + i
            print(f"suma = {suma}")
            return i

        elif isinstance(i,list) or isinstance(i,tuple):  # если элемент список или кортеж то берем по одному элемиенту из него
            for k, i in enumerate(i):
                wtf(i)
          

    for i in args:                          # сначала работаем с аргументами переменной длины без указания ключевого слова
        wtf(i)

    for k, i in kwargs.items():             # далее работаем с аргументами переменной длины с указанием ключевого слова
        print(k, i)
        for k, i in enumerate(i):
            print (f"value = {i}")
            wtf(i)



    return product, suma
        

nsum(1, 2, 10, [3, 4, (5, 6, 0)], a=(10, 11), b=(3, 4, [5, 6, [7, 8], []]))